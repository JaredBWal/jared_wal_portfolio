{
    "projects" : [
        
        {
            "title":"ColonySim.io",
            "tags": ["JavaScript", "HTML/CSS"],
            "main_display_img": "/images/colony-sim-main-img.png",
            "main_display_description": "A customizable cellular simulation website with over 50,000 users",
            "links":[["https://colonysim.net/","ColonySim.io"]],
            "imgs": [["/images/colony-sim-flag-editor.png","Custom colony editor (flag, politics, and traits)"]],
            "description": "This project is a public sequel to my Java 'Cellular-Automata Simulation'. Since its release in 2022, the site has had millions of visits and continues to have over 50,000 users! This simulation allows users to watch colonies grow, fight, and partake in diplomatic relations. The user has the ability to create their own custom colonies or generate randomized colonies. The goal of this simulation project was to bring a community together that revolved around maps and data. I am very happy to see that this goal was reached and continues to grow. This community can be seen in the demo videos above.",
            "description_bullets_label": "How ColonySim.io is made:",
            "description_bullets":["ColonySim is a website made using JavaScript/HTML/CSS, and it is hosted with AWS",
                                  "Heavy optimization is needed to process millions of tiles a second, such as only drawing tiles the minimum number of times required",
                                  "I currently lead a small developer team to futher develop updates for the simmulation, and the in-development sequel"],
            "videos": [["/videos/colony-sim-community-map-demo.mp4", "Simulating a map made from the community"],
                        ["/videos/colony-sim-colony-view-demo.mp4","Shows colony statistics, editor, and graphs"],
                        ["/videos/colony-sim-community-save-demo.mp4","Simulating a custom geography save from the community"] ]
        },
        {
            "title":"Air-Mouse",
            "tags": ["Python", "OpenCV", "PyAutoGUI"],
            "main_display_img": "/images/air-mouse-coverImg.png",
            "main_display_description": "A program that allows the use to control the mouse with their finger",
            "imgs": [["/images/air-mouse-img-2.png","Image showing the OpenCV detected hand and the two nodes (thumb and index finger) that determine the mouse movement and when the mouse clicks"]],
            "description": "This project is a simple conjunction of two popular python libraries, OpenCV and PyAutoGUI. When combined together you get a futuristic feeling application that allows you to move and click your mouse with just your index finger and thumb. Since creating this project was relatively simple, I find it very exiting to think of the numerous other projects you can create using this combinations of libraries.",
            "description_bullets_label": "How I made it:",
            "description_bullets":["Used OpenCV to estimate the users thumb and index finger node positions", 
                                "Used those position values to call PAutoGUI methods to move/click the mouse",
                                "The mouse clicks when the thumb y-position is higher than the index finger y-position"],
            "links": [["https://github.com/JaredBWal/OpenCV-Hand-Tracking-Mouse","Github"]],
            "videos": [["/videos/air-mouse-video.mp4", "Video showing the mouse follow the finger and click the screen"] ]
        },
        {
            "title":"MERN CRUD Finance Tracker",
            "tags": ["React JS", "APIs", "Node.js", "Databases", "MongoDB"],
            "main_display_img": "/images/projects/MERN-CRUD-img.png",
            "main_display_description": "A React JS app that uses MongoDB and Express to allow the user to smoothly track their finances",
            "imgs": [],
            "links":[["https://github.com/JaredBWal/Finance-Tracker","Github"]],
            "description": "This is a simple finance-tracker that lets users calculate the annual cost of the products they buy. It is very intresting to see how high one's annual cost will rise by adding small recurring purchases (like streaming services).",
            "description_bullets_label": "App Features:",
            "description_bullets": ["This app was created using the MERN (MongoDB, Express, React, Node) stack",
                                    "The app has all CRUD operations, such as viewing, adding, updating, and removing financial products",
                                    "This app efficiently uses react hooks to smoothly re-render components when they change"],
            "videos": [["/videos/projects/MERN-CRUD-main-video.mp4", "Demo of Finance Tracker with all CRUD operations, and shows what the database looks like afterwards"],
                    ["/videos/projects/MERN-CRUD-edit-video.mp4","Shows more edit and remove operations"]
        ]

        },
        {
            "title":"Tournaments.sh (VTHacks)",
            "tags": ["React JS", "JavaScript", "Databases", "APIs", "HTML/CSS"],
            "main_display_img": "/images/tournaments_sh-main.jpg",
            "main_display_description": "A hackathon project that allows users to create and register for 'osu!' tournaments",
            "imgs": [["/images/tournaments_sh-main.jpg","Page displaying all active tournaments"],
                     ["/images/tournaments_sh-detail-page.png","Page displaying the detail/registration page of a tournament"],
                     ["/images/tournaments_sh-authorization-page.png","Showing osu required authorization "]   ],
            "description": "This project was created for the Virginia Tech Hackathon (VTHacks 11). I worked closely with two of my fellow ACM club members to create a content management system that would allow users to create tournaments for the game ‘osu!’. Users also have the ability to sign into their osu accounts and register for active tournaments. The tournament hosts are able to create tournaments for specific groups of players in osu, such as only allowing users of a certain rank range to register for the tournament.",
            "description_bullets_label": "My Contributions to Tournaments.sh:",
            "description_bullets": ["Created the Front-end Application using React and Tailwinds", 
                                    "Handled the fetching of data from MongoDb using React Hooks (useEffect and useState)",
                                    "Handled the sending of post requests for newly created tournaments"],

            "videos": [["/videos/tournaments_sh-register-video.mp4","Demostration of tournament registration"] ],
            "links": [["https://github.com/alexp9982/VTHaxOsuWebsite", "Github"],
                    ["https://devpost.com/software/tournament-sh","DevPost"]]
        },
        {
            "title":"History 'Before or After' Website",
            "tags": ["JavaScript", "React JS", "Json"],
            "main_display_img": "/images/projects/aws-history-game-main-img.png",
            "main_display_description": "A 'higher or lower' style history game",
            "imgs": [["/images/projects/aws-history-game-img.png","An example of a question"]],
            "description": "This project is a simple conjunction of two popular python libraries, OpenCV and PyAutoGUI. When combined together you get a futuristic feeling application that allows you to move and click your mouse with just your index finger and thumb. Since creating this project was relatively simple, I find it very exiting to think of the numerous other projects you can create using this combinations of libraries.",
            "description_bullets_label": "How I made it:",
            "description_bullets":["Used OpenCV to estimate the users thumb and index finger node positions", 
                                "Used those position values to call PAutoGUI methods to move/click the mouse",
                                "The mouse clicks when the thumb y-position is higher than the index finger y-position"],
            "links": [["https://www.awshistorygame.com/","awshistorygame.com"], ["https://github.com/JaredBWal/HistoryGuess","Github"]],
            "videos": [["/videos/projects/aws-history-game-demo.mp4", "Video showing gameplay from the history game!"] ]
        },
        {
            "title":"CNU Maps",
            "tags": ["Python"],
            "main_display_img": "/images/cnu-maps.png",
            "main_display_description": "A ACM club project that displays the fastest route between two buildings on my campus",
            "imgs": [["/images/cnu-maps.png","Shows fastest route between two buidling on campus"],
                    ["/images/cnu-maps-login-page.png","Shows how you select between two buildings and how you can log into an account"]],
            "links":[["https://play.google.com/store/search?q=cnu%20maps&c=apps&hl=en_US&gl=US","Google Play"]],
            "description": "CNU Maps is a group (ACM Club) project. I worked with fellow club members to develop a cross-platform mobile application that can find the fastest path between any two buildings on our campus (Christopher Newport University). This project was developed with Python using the OpenStreetMap API and the Toga GUI toolkit. The reason for creating this application was because there was no Google pathing for our school at that time, and we wanted to make an app that could help new students and visitors get directions to campus buildings.",
            "description_bullets_label": "My contributions to CNU Maps:",
            "description_bullets": ["Developed the UI with the Toga toolkit, such as the 'Origin'/'Destination' selection dropdowns",
                                    "Created all needed nodes with OpenStreetMap in order for the calculated pathing to be optimized (such as adding new paths and entrances)"]
        },
        {
            "title":"Cellular-Automata Simulation",
            "tags": ["Java"],
            "main_display_img": "/images/projects/java-cellular-main-img.png",
            "main_display_description": "A simple cellular-automata simulation that was my inspiration to develop 'ColonySim.io'",
            "imgs": [["/images/projects/java-cellular-main-img.png","Showing another simulation on the world map"]],
            "links":[["https://github.com/JaredBWal/Colony-Cellular-Automata","Github"]],
            "description": "This cellular-automata-style simulation was the inspiration for 'ColonySim.io'. This Java version offers the user a simple simulation between colonies. All cells try and reproduce to other cells around them and will fight any other colony that occupies the new tile they want to reproduce to. The green cells you see on the frontlines of each colony (and also scattered across the map) are cells that have died from either old age, or from being killed by another cell.",
            "description_bullets_label": "How this Simulation was Made:",
            "description_bullets": ["This project was made with Java and Java Swing for the UI",
             "Every tile is represented by a 1x1 pixel that is drawn wtih the Java 'graphics2D library",
              "Every tile is one individual cell that has a birth rate, age, and strength"],
            "videos": [["/videos/projects/java-cellular-demo.mp4", "Video showing a basic world simulation"] ]

        }

    ],
    "tags": ["Python", "JavaScript", "Java", "React JS", "Node.js","APIs","Databases", "HTML/CSS" ]


}